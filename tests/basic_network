#!/bin/sh

set -e
set -x

TEST_MAX_DUR=60

export PYTHONPATH=../sippy_lite
PYINT=${PYINT:-"python2"}

write_siplog() {
  APPNAME=`basename "${0}"`
  ${PYINT} ../sippy_lite/sippy/SipLogger.py "${APPNAME}" "${1}"
}

setup_rtpp() {
  TEST_DUR=${1:-${TEST_MAX_DUR}}
  sleep ${TEST_DUR}
  cat input/get_stats
  write_siplog "Finishing RTPProxy #${2}"
  if [ "${RTPP_BRANCH}" = "rtpp_2_0" -a -e rtpp${2}.pid ]
  then
    R_PID=`cat rtpp${2}.pid`
    write_siplog "Nudging ${R_PID} with SIGHUP"
    kill -HUP ${R_PID}
  fi
}

if [ "${RTPP_BRANCH}" = "rtpp_2_0" ]
then
  STDIO_CH="stdio:"
else
  STDIO_CH="stdioc:"
fi

RTPPROXY="${RTPPROXY_CMD:-/usr/local/bin/rtpproxy_debug}"
RTPP_DEBUG_LVL="dbug"
RTPPROXY_ARGS="-T5 -f -b -s ${STDIO_CH} -d ${RTPP_DEBUG_LVL}"
RTPPROXY0_SOCK="-s cunix:/tmp/rtpp0.sock"
RTPPROXY0_DUR="${TEST_MAX_DUR}"
RTPPROXY1_SOCK="-s udp:127.0.0.1:32323"
RTPPROXY1_DUR="30"
RTPPROXY2_SOCK="-s udp6:::1:32322"
RTPPROXY2_DUR="${TEST_MAX_DUR}"
RTPPROXY3_SOCK="-s udp6:::1:32323"
RTPPROXY3_DUR="30"

start_rtpproxy() {
  _i=${1}
  _j=${_j:-0}
  write_siplog "Starting RTPProxy #${_i}"
  eval "RTPPROXY_SOCK=\${RTPPROXY${_i}_SOCK}"
  eval "RTPPROXY_DUR=\${RTPPROXY${_i}_DUR}"
  (setup_rtpp ${RTPPROXY_DUR} ${_i} | \
    ${RTPPROXY} -i ${RTPPROXY_SOCK} ${RTPPROXY_ARGS} -p rtpp${_i}.pid \
     -s cunix:_rtpp${_i}.sock > rtpp${_j}.rout 2>rtpp${_j}.rlog) &
  RTPP_PID=${!}
  eval "RTPP${_i}_PID=${RTPP_PID}"
  _j=$((${_j} + 1))
}

mark_tp() {
  TP=${TP:-0}
  TP=$((${TP} + 1))
  TP_MSG="TP${TP}: ${1}"
  write_siplog "${TP_MSG}"
  echo "----- [${TP_MSG}] -----" >> rtpcc.out
}

for i in 0 1 2
do
  start_rtpproxy ${i}
done
sed 's|%%STATUS%%|ACTIVE|g' basic_network.xml.in > basic_network.xml
${PYINT} ../rtp_cluster.py -f -s rtpc.sock -c basic_network.xml &
RTPC_PID=${!}

sleep 2
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls > rtpcc.out

mark_tp "Testing: creating some sessions"
${PYINT} ../sippy_lite/sippy/tools/rtpp_query.py -S ../sippy_lite \
 -i input/session_create -s udp:127.0.0.1:32324 > session_create.qout
mark_tp "Testing: getting stats"
${PYINT} ../sippy_lite/sippy/tools/rtpp_query.py -S ../sippy_lite \
 -i input/get_stats -s udp:127.0.0.1:32324 > get_stats.qout
mark_tp "Testing: deleting sessions"
${PYINT} ../sippy_lite/sippy/tools/rtpp_query.py -S ../sippy_lite \
 -i input/session_delete -s udp:127.0.0.1:32324 >> session_create.qout

sed 's|%%STATUS%%|SUSPENDED|g' basic_network.xml.in > basic_network.xml

mark_tp "Testing: reload command"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock reload >> rtpcc.out
sleep 2
mark_tp "Testing after suspending one"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
mark_tp "Testing: pause command"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock modify basic_network pause RTPPROXY2 >> rtpcc.out
sleep 2
mark_tp "Testing after pausing RTPPROXY2"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
mark_tp "Testing: delete command"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock modify basic_network delete RTPPROXY0 >> rtpcc.out
sleep 2
mark_tp "Testing after deleting RTPPROXY0"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls basic_network >> rtpcc.out
mark_tp "Testing: delete command"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock modify basic_network delete RTPPROXY3 >> rtpcc.out
sleep 2
mark_tp "Testing after deleting RTPPROXY3"
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls basic_network >> rtpcc.out

sleep ${RTPPROXY1_DUR}

mark_tp "Testing: RTPproxy \"RTPPROXY1\" has changed status..."

${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls basic_network >> rtpcc.out

#${PYINT} ../rtp_cluster_client.py -s _rtpp1.sock X

wait ${RTPP1_PID}
write_siplog "RTPProxy #1 has ended"
MAX_RECOVERY_DUR=$((60+10))
RTPPROXY1_DUR="${MAX_RECOVERY_DUR}"
start_rtpproxy 1
RTPPROXY3_DUR=$((${RTPPROXY1_DUR} + 10))
start_rtpproxy 3

sleep ${MAX_RECOVERY_DUR}

mark_tp "Testing: RTPproxy \"RTPPROXY2\", \"RTPPROXY1\" has changed status..."

${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls basic_network >> rtpcc.out

mark_tp "Testing: reload command"

${PYINT} ../rtp_cluster_client.py -s rtpc.sock reload >> rtpcc.out
sleep 2
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls >> rtpcc.out
${PYINT} ../rtp_cluster_client.py -s rtpc.sock ls basic_network >> rtpcc.out

for i in 0 1 2 3
do
  eval "RTPP_PID=\${RTPP${i}_PID}"
  wait ${RTPP_PID}
  write_siplog "RTPProxy #${i} has ended"
done

kill -TERM ${RTPC_PID}
wait ${RTPC_PID}
write_siplog "Rtp Cluster has ended"

grep -v 'average rtpc delay = ' rtpcc.out | diff -U10 output/rtpcc -
diff -U10 output/session_create session_create.qout
write_siplog "All done"
